// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Nursing_Student_Vetting.Migrations
{
    [DbContext(typeof(NursingStudentContext))]
    [Migration("20250206234735_InitialStartup")]
    partial class InitialStartup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.HasKey("ClassID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassID = 2010,
                            CategoryID = 8,
                            ClassName = "Human Anatomy and Physiology I",
                            CreditHours = 3,
                            IsRequired = true
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryID = 1,
                            ClassName = "Principles of Accounting I",
                            CreditHours = 3,
                            IsRequired = false
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.ClassCategories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryPrefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("ClassCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Accounting",
                            CategoryPrefix = "ACCT"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Agriculture",
                            CategoryPrefix = "AGRI"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Agriculture",
                            CategoryPrefix = "AGRM"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Anthropology",
                            CategoryPrefix = "ANTH"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Art",
                            CategoryPrefix = "ART"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Art Performance",
                            CategoryPrefix = "ARTP"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Astronomy",
                            CategoryPrefix = "ASTR"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Biology",
                            CategoryPrefix = "BIOL"
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryName = "Business",
                            CategoryPrefix = "BUSN"
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryName = "Chemistry",
                            CategoryPrefix = "CHEM"
                        },
                        new
                        {
                            CategoryID = 11,
                            CategoryName = "Communications",
                            CategoryPrefix = "COMM"
                        },
                        new
                        {
                            CategoryID = 12,
                            CategoryName = "Computer Info Tech",
                            CategoryPrefix = "CITC"
                        },
                        new
                        {
                            CategoryID = 13,
                            CategoryName = "Computer Science",
                            CategoryPrefix = "CISP"
                        },
                        new
                        {
                            CategoryID = 14,
                            CategoryName = "Criminal Justice",
                            CategoryPrefix = "CRMJ"
                        },
                        new
                        {
                            CategoryID = 15,
                            CategoryName = "Culinary Arts",
                            CategoryPrefix = "CULA"
                        },
                        new
                        {
                            CategoryID = 16,
                            CategoryName = "Digital Media",
                            CategoryPrefix = "DIGM"
                        },
                        new
                        {
                            CategoryID = 17,
                            CategoryName = "Early Childhood Education",
                            CategoryPrefix = "ECED"
                        },
                        new
                        {
                            CategoryID = 18,
                            CategoryName = "Economics",
                            CategoryPrefix = "ECON"
                        },
                        new
                        {
                            CategoryID = 19,
                            CategoryName = "Education",
                            CategoryPrefix = "EDUC"
                        },
                        new
                        {
                            CategoryID = 20,
                            CategoryName = "Electrical Engin Tech",
                            CategoryPrefix = "EETC"
                        },
                        new
                        {
                            CategoryID = 21,
                            CategoryName = "Emergency Med Serv Para",
                            CategoryPrefix = "EMSP"
                        },
                        new
                        {
                            CategoryID = 22,
                            CategoryName = "Emergency Med Service",
                            CategoryPrefix = "EMSA"
                        },
                        new
                        {
                            CategoryID = 23,
                            CategoryName = "Emergency Med Service",
                            CategoryPrefix = "EMSB"
                        },
                        new
                        {
                            CategoryID = 24,
                            CategoryName = "Engineering",
                            CategoryPrefix = "ENGR"
                        },
                        new
                        {
                            CategoryID = 25,
                            CategoryName = "Engineering Systems Tech",
                            CategoryPrefix = "ENST"
                        },
                        new
                        {
                            CategoryID = 26,
                            CategoryName = "Engineering Technology",
                            CategoryPrefix = "EGRT"
                        },
                        new
                        {
                            CategoryID = 27,
                            CategoryName = "English",
                            CategoryPrefix = "ENGL"
                        },
                        new
                        {
                            CategoryID = 28,
                            CategoryName = "Fire Science",
                            CategoryPrefix = "FIRE"
                        },
                        new
                        {
                            CategoryID = 29,
                            CategoryName = "French",
                            CategoryPrefix = "FREN"
                        },
                        new
                        {
                            CategoryID = 30,
                            CategoryName = "Geography",
                            CategoryPrefix = "GEOG"
                        },
                        new
                        {
                            CategoryID = 31,
                            CategoryName = "Geology",
                            CategoryPrefix = "GEOL"
                        },
                        new
                        {
                            CategoryID = 32,
                            CategoryName = "Health",
                            CategoryPrefix = "HLTH"
                        },
                        new
                        {
                            CategoryID = 33,
                            CategoryName = "Health Information Management",
                            CategoryPrefix = "HIMT"
                        },
                        new
                        {
                            CategoryID = 34,
                            CategoryName = "History",
                            CategoryPrefix = "HIST"
                        },
                        new
                        {
                            CategoryID = 35,
                            CategoryName = "Hospitality Management",
                            CategoryPrefix = "HGMT"
                        },
                        new
                        {
                            CategoryID = 36,
                            CategoryName = "Humanities",
                            CategoryPrefix = "HUM"
                        },
                        new
                        {
                            CategoryID = 37,
                            CategoryName = "Information Systems",
                            CategoryPrefix = "INFS"
                        },
                        new
                        {
                            CategoryID = 38,
                            CategoryName = "Mathematics",
                            CategoryPrefix = "MATH"
                        },
                        new
                        {
                            CategoryID = 39,
                            CategoryName = "Music",
                            CategoryPrefix = "MUS"
                        },
                        new
                        {
                            CategoryID = 40,
                            CategoryName = "Nursing",
                            CategoryPrefix = "NRSG"
                        },
                        new
                        {
                            CategoryID = 41,
                            CategoryName = "Occupational Thrpy Asst",
                            CategoryPrefix = "OTAP"
                        },
                        new
                        {
                            CategoryID = 42,
                            CategoryName = "Paralegal",
                            CategoryPrefix = "LEGL"
                        },
                        new
                        {
                            CategoryID = 43,
                            CategoryName = "Pharmacy Technician",
                            CategoryPrefix = "PHRX"
                        },
                        new
                        {
                            CategoryID = 44,
                            CategoryName = "Philosophy",
                            CategoryPrefix = "PHIL"
                        },
                        new
                        {
                            CategoryID = 45,
                            CategoryName = "Physical Education",
                            CategoryPrefix = "PHED"
                        },
                        new
                        {
                            CategoryID = 46,
                            CategoryName = "Physical Science",
                            CategoryPrefix = "PSCI"
                        },
                        new
                        {
                            CategoryID = 47,
                            CategoryName = "Physical Therapist Asst",
                            CategoryPrefix = "PTAT"
                        },
                        new
                        {
                            CategoryID = 48,
                            CategoryName = "Physics",
                            CategoryPrefix = "PHYS"
                        },
                        new
                        {
                            CategoryID = 49,
                            CategoryName = "Political Science",
                            CategoryPrefix = "POLS"
                        },
                        new
                        {
                            CategoryID = 50,
                            CategoryName = "Psychology",
                            CategoryPrefix = "PSYC"
                        },
                        new
                        {
                            CategoryID = 51,
                            CategoryName = "Reading",
                            CategoryPrefix = "READ"
                        },
                        new
                        {
                            CategoryID = 52,
                            CategoryName = "Religion",
                            CategoryPrefix = "RELS"
                        },
                        new
                        {
                            CategoryID = 53,
                            CategoryName = "Respiratory Care",
                            CategoryPrefix = "RESP"
                        },
                        new
                        {
                            CategoryID = 54,
                            CategoryName = "Social Work",
                            CategoryPrefix = "SWRK"
                        },
                        new
                        {
                            CategoryID = 55,
                            CategoryName = "Sociology",
                            CategoryPrefix = "SOCI"
                        },
                        new
                        {
                            CategoryID = 56,
                            CategoryName = "Spanish",
                            CategoryPrefix = "SPAN"
                        },
                        new
                        {
                            CategoryID = 57,
                            CategoryName = "Special Education",
                            CategoryPrefix = "SPED"
                        },
                        new
                        {
                            CategoryID = 58,
                            CategoryName = "Surgical Technology",
                            CategoryPrefix = "SURG"
                        },
                        new
                        {
                            CategoryID = 59,
                            CategoryName = "Theatre",
                            CategoryPrefix = "THEA"
                        },
                        new
                        {
                            CategoryID = 60,
                            CategoryName = "Women/Gender Studies",
                            CategoryPrefix = "WGST"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationScore")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = 1001,
                            Address = "123 Example St",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EvaluationScore = 0,
                            FirstName = "John",
                            Gender = "Male",
                            GraduationDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Doe",
                            StartDate = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentID = 1002,
                            Address = "456 Example Ave",
                            DateOfBirth = new DateTime(1999, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EvaluationScore = 0,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentClass", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("LetterGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID", "CategoryID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            ClassID = 2010,
                            CategoryID = 8,
                            StudentID = 1001,
                            LetterGrade = "B"
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryID = 1,
                            StudentID = 1002,
                            LetterGrade = "A"
                        },
                        new
                        {
                            ClassID = 2010,
                            CategoryID = 8,
                            StudentID = 1002,
                            LetterGrade = "C"
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryID = 1,
                            StudentID = 1001,
                            LetterGrade = "A"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentTest", b =>
                {
                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("TestID", "AttemptNumber", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentTests");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            AttemptNumber = 1,
                            StudentID = 1001,
                            Score = 22
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 1,
                            StudentID = 1001,
                            Score = 74
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 2,
                            StudentID = 1001,
                            Score = 94
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 1,
                            StudentID = 1002,
                            Score = 92
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<int>("GradingScale")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            GradingScale = 36,
                            TestName = "ACT"
                        },
                        new
                        {
                            TestID = 2,
                            GradingScale = 100,
                            TestName = "Designated Test"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.ClassCategories", "Category")
                        .WithMany("Classes")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentClass", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Student_Vetting.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassID", "CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentTest", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Student_Vetting.Models.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.ClassCategories", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Student", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("StudentTests");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Test", b =>
                {
                    b.Navigation("StudentTests");
                });
#pragma warning restore 612, 618
        }
    }
}
